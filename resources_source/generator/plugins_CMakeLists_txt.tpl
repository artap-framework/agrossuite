CMAKE_MINIMUM_REQUIRED(VERSION 3.13.4)
project(plugins)
set(CMAKE_AGROS_SOURCE ${CMAKE_SOURCE_DIR}/../..)
message("AGROS SOURCE: ${CMAKE_AGROS_SOURCE}")
set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/../cmake ${CMAKE_AGROS_SOURCE}/dealii/cmake)

# For Win64
# if(${CMAKE_CL_64})
#   set(CMAKE_EXE_LINKER_FLAGS "/machine:X64")
#   SET (CMAKE_SHARED_LINKER_FLAGS "/machine:X64")
#   SET (CMAKE_MODULE_LINKER_FLAGS "/machine:X64")
# endif(${CMAKE_CL_64})

# Allow to override the default values in CMake.vars:
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
ELSE()
    INCLUDE(../CMake.vars.Windows OPTIONAL)
ENDIF()
include(../CMake.vars OPTIONAL)

# OpenGL
# FIND_PACKAGE(OpenGLCustom REQUIRED)

# Handle Qt.
SET(CMAKE_AUTOMOC TRUE)

find_package(Qt6 COMPONENTS Widgets REQUIRED)
find_package(Qt6 COMPONENTS Svg REQUIRED)
find_package(Qt6 COMPONENTS SvgWidgets REQUIRED)
find_package(Qt6 COMPONENTS Core REQUIRED)
find_package(Qt6 COMPONENTS Network REQUIRED)
find_package(Qt6 COMPONENTS Core5Compat REQUIRED)

# Build type.
ADD_DEFINITIONS(-DBOOST_ALL_NO_LIB)
IF(DEFINED CMAKE_BUILD_TYPE)  
	SET(DEAL_II_BUILD_TYPE ${CMAKE_BUILD_TYPE})
ELSE()
	SET(DEAL_II_BUILD_TYPE "Release")
ENDIF()

IF(WIN32)
  # Naming of libraries to link to.
  FIND_LIBRARY(PLUGINS_QUAZIP_LIBRARY agros_3dparty_quazip PATHS ${CMAKE_SOURCE_DIR}/../usr/lib NO_DEFAULT_PATH)
  FIND_LIBRARY(PLUGINS_DXFLIB_LIBRARY agros_3dparty_dxflib PATHS ${CMAKE_SOURCE_DIR}/../usr/lib NO_DEFAULT_PATH)
  FIND_LIBRARY(PLUGINS_CTEMPLATE_LIBRARY agros_3dparty_ctemplate PATHS ${CMAKE_SOURCE_DIR}/../usr/lib NO_DEFAULT_PATH)
 include_directories("C:/Program Files (x86)/Intel/oneAPI/tbb/2021.12/include")
ENDIF(WIN32)

FIND_LIBRARY(PLUGINS_AGROS_LIBRARY agros_library PATHS ${CMAKE_SOURCE_DIR}/../usr/lib NO_DEFAULT_PATH)

# Output paths.
SET(EXECUTABLE_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/../usr/lib)
SET(LIBRARY_OUTPUT_PATH ${CMAKE_SOURCE_DIR}/../usr/lib)

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../usr/lib)
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../usr/lib)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/../usr/lib)
  
IF(WIN32)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/../usr/lib)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/../usr/lib)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/../usr/lib)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/../usr/lib)
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_SOURCE_DIR}/../usr/lib)
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_SOURCE_DIR}/../usr/lib)
ENDIF(WIN32)

# Set global compiler parameters.
IF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
  INCLUDE_DIRECTORIES(/usr/include/google)
ENDIF()
IF(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unsupported-friend")
  SET(CMAKE_EXE_LINKER_FLAGS "-Wl,-export-dynamic")
ENDIF()

IF(MSVC)
  SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /NODEFAULTLIB:libcmtd /NODEFAULTLIB:libcmt")
ENDIF(MSVC)

# Python
FIND_PACKAGE(Python COMPONENTS Development REQUIRED)
INCLUDE_DIRECTORIES(${Python_INCLUDE_DIRS})
IF(MSVC)
	get_filename_component(PYTHON_INCLUDE_DIR ${PYTHON_INCLUDE_DIR} PATH)
ENDIF()

# Include current dir
SET(CMAKE_INCLUDE_CURRENT_DIR ON)

# Turn on Unicode
ADD_DEFINITIONS(-DUNICODE -D_UNICODE)

# Enable debugging symbols for all files all the time:
IF(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  SET(CMAKE_BUILD_TYPE RelWithDebInfo)
  # SET(RELEASE_FLAGS "-DNDEBUG -g -O3 -Ofast")
  SET(RELEASE_FLAGS "-DNDEBUG -g -O0 -Ofast")
  SET(CMAKE_CXX_FLAGS "-Wno-deprecated -Wno-deprecated-declarations -Wno-missing-declarations -Wno-return-type ${CMAKE_CXX_FLAGS} ${RELEASE_FLAGS}")
  ADD_DEFINITIONS(-DQT_NO_DEBUG_OUTPUT)
ENDIF()

# Include OUR header files location
include_directories(${CMAKE_AGROS_SOURCE}/3rdparty)
include_directories(${CMAKE_AGROS_SOURCE}/3rdparty/ctemplate)
include_directories(${CMAKE_AGROS_SOURCE}/3rdparty/libdxfrw)
include_directories(${CMAKE_AGROS_SOURCE}/3rdparty/qsingleapplication)
include_directories(${CMAKE_AGROS_SOURCE}/3rdparty/quazip)
include_directories(${CMAKE_AGROS_SOURCE}/3rdparty/matio)

# deal.II
INCLUDE_DIRECTORIES("${CMAKE_AGROS_SOURCE}/dealii/include/")
INCLUDE_DIRECTORIES("${CMAKE_AGROS_SOURCE}/dealii/build/include/")
INCLUDE_DIRECTORIES("${CMAKE_AGROS_SOURCE}/dealii/bundled/boost-1.70.0/include/")
INCLUDE_DIRECTORIES("${CMAKE_AGROS_SOURCE}/dealii/bundled/tbb-2018_U2/include/")
INCLUDE_DIRECTORIES("${CMAKE_AGROS_SOURCE}/dealii/bundled/kokkos-3.7.00/core/src/")
INCLUDE_DIRECTORIES("${CMAKE_AGROS_SOURCE}/dealii/bundled/kokkos-3.7.00/tpls/desul/include/")

FIND_PACKAGE(deal.II HINTS "${CMAKE_AGROS_SOURCE}/dealii/build" REQUIRED)

# modules
{{#SOURCE}}
ADD_SUBDIRECTORY({{ID}}){{/SOURCE}}
