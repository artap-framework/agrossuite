variables:
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_STRATEGY: fetch
  # GIT_CLEAN_FLAGS: -ffdx -e dealii/build
  GIT_CLEAN_FLAGS: none

build-linux:
  stage: build
  tags:
    - agros
    - linux
  
  # Use ccache transparently, and print stats before/after
  before_script:
    - export PATH="/usr/lib/ccache:$PATH"
    - export CCACHE_BASEDIR="$PWD"
    - export CCACHE_DIR="$PWD/ccache"
    - export CCACHE_COMPILERCHECK=content
    - ccache --zero-stats || true
    - ccache --show-stats || true
  after_script:
    - export CCACHE_DIR="$PWD/ccache"
    - ccache --show-stats  
  script: 
    - git submodule update --init
    - cd dealii 
    - mkdir -p build 
    - cd build 
    - cmake -DCMAKE_BUILD_TYPE="Release" -DDEAL_II_WITH_ZLIB="ON" -DDEAL_II_WITH_UMFPACK="OFF" -DDEAL_II_FORCE_BUNDLED_BOOST="ON" -DDEAL_II_FORCE_BUNDLED_THREADS="ON" -DDEAL_II_WITH_TBB="ON" -DDEAL_II_WITH_GMSH="OFF" -DDEAL_II_WITH_MUPARSER="OFF" -DDEAL_II_WITH_ARPACK="OFF" -DDEAL_II_COMPONENT_EXAMPLES="OFF" ..
    - cmake --build . --config Release --parallel 10 -j 10
    - cd ../../
    #  agros
    - mkdir -p build
    # copy deal
    - mkdir -p build/usr/lib 
    - cp -f dealii/build/lib/libdeal_II.so.9.5.2 build/usr/lib/libdeal_II.so.9.5.2     
    - cd build
    # ******************* TODO: fix after fixing cmake for Python
    - rm -rf agros-python
    # *******************
    - cmake ..     
    - cmake --build . --config Release --parallel 10 -j 10
    # generator
    - ./usr/bin/agros_generator
    - cd plugins
    - cmake .
    - cmake --build . --config Release --parallel 10 -j 10
    - cd ..
    # pip package
    # create python env
    - cd agros-python 
    - python3 -m venv env
    - source env/bin/activate
    - pip install wheel
    - pip install cython
    - pip install scikit-build
    - pip install pytest
    - pip install pytest-rerunfailures
    - pip install numpy
    # strip shared objects
    - mkdir -p agrossuite/_skbuild/ 
    - find agrossuite/_skbuild/ -name \*.so -execdir strip {} \;
    # remove static libs
    - find agrossuite/_skbuild/ -name \*.a -execdir rm {} \;
    # remove old wheels
    - rm -rf *.whl	
    # build wheel
    # - pip wheel agrossuite/.
    # install package
    - pip install agrossuite/. -v
    - cd ..
    
test-linux:
  stage: test
  needs: ["build-linux"]
  tags:
    - agros
    - linux

  script: 
    - cd build/agros-python
    - source env/bin/activate    
    - cd tests
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v --reruns 5 --only-rerun AssertionError --only-rerun ValueError
    - cd ../..
  artifacts:
    when: always
    reports:
      junit: report.xml
      
test-linux-tutorials:
  stage: test
  needs: ["build-linux"]
  tags:
    - agros
    - linux

  script: 
    - cd build/agros-python
    - source env/bin/activate    
    - cd tests-tutorials
    # generate test files
    - python tutorials.py
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v
    - cd ../..
  artifacts:
    when: always
    reports:
      junit: report.xml
      
test-linux-import-a2d:
  stage: test
  needs: ["build-linux"]
  tags:
    - agros
    - linux

  script: 
    - cd build/agros-python
    - source env/bin/activate    
    - cd tests-import-a2d
    # generate test files
    - python tutorials_a2d.py
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v
    - cd ../..
  artifacts:
    when: always
    reports:
      junit: report.xml
          
    
deploy-linux-appimage:
  stage: deploy
  needs: ["test-linux", "test-linux-tutorials", "test-linux-import-a2d"]
  tags:
    - agros
    - linux

  script: 
    - cd build
    # rm files
    - rm -rf appimage 

    # create dirs
    - mkdir appimage
    - mkdir appimage/usr
    - mkdir appimage/usr/bin
    - mkdir appimage/usr/lib
    - mkdir appimage/usr/share
    - mkdir appimage/usr/share/agrossuite

    # copy binary files
    - cp usr/bin/agros appimage/usr/bin/
    - cp -r ../resources appimage/usr/share/agrossuite/resources/
    - cp usr/lib/libagros_*.so appimage/usr/lib/
    - cp usr/lib/libsolver_plugin_*.so appimage/usr/lib/
    - cp usr/lib/libdeal*.so* appimage/usr/lib/

    # copy resources
    - cp -r resources_source/appimage/* appimage

    # strip
    - strip appimage/usr/bin/*
    - strip appimage/usr/lib/*

    # qt 
    - export QT_SELECT=6
    - export QMAKE=/usr/bin/qmake6 
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:usr/lib
    - linuxdeploy-x86_64.AppImage --appdir appimage/ --executable usr/bin/agros --plugin qt --desktop-file resources_source/appimage/usr/share/applications/agros.desktop

    # rm metainfo
    - rm -rf appimage/usr/share/metainfo

    # build appimage
    - appimagetool-x86_64.AppImage appimage/
    
    # upload to agros2d
    - curl -T Agros_Suite-x86_64.AppImage -u "$agros2d_ftp_user:$agros2d_ftp_password" ftp://agros2d.org/linux/

deploy-linux-wheel:
  stage: deploy
  needs: ["test-linux", "test-linux-tutorials", "test-linux-import-a2d"]
  tags:
    - agros
    - linux

  script: 
    - cd build/agros-python/
    - source env/bin/activate
    # upload to pypi
    - pip install twine
        
    # - python3 -m twine upload agrossuite-*.whl
    - cd ../..





      
build-windows:
  stage: build
  tags:
    - agros  		
    - win11

  before_script:
    # 
  
  after_script:
    # 

  script:   
    - git submodule init
    - git submodule update
    - xcopy "C:\agros_dependencies\include\boost\ptr_container"  "C:\gitlab-runner\builds\SgMYSKUTm\0\agros\agros2d\dealii\bundled\boost-1.70.0\include\boost\ptr_container\" /s /e /Y | Out-Null 
    # Build DEAL
    - cd dealii
    - mkdir -p build
    - cd build
    # -DDEAL_II_FORCE_BUNDLED_THREADS="ON" -DDEAL_II_WITH_TBB="ON" 
    - cmake -DCMAKE_CXX_FLAGS="/std-" -DCMAKE_CXX_FLAGS_RELEASE="/Od" -DCMAKE_BUILD_TYPE="Release" -DDEAL_II_WITH_ZLIB="ON" -DDEAL_II_WITH_UMFPACK="OFF" -DDEAL_II_FORCE_BUNDLED_BOOST="ON" -DDEAL_II_WITH_GMSH="OFF" -DDEAL_II_FORCE_BUNDLED_THREADS="ON" -DDEAL_II_WITH_TBB="ON" -DDEAL_II_WITH_MUPARSER="OFF" -DDEAL_II_WITH_ARPACK="OFF" -DDEAL_II_COMPONENT_EXAMPLES="OFF" -DZLIB_INCLUDE_DIR="C:/agros_dependencies/include/zlib" -DZLIB_LIBRARY="C:/agros_dependencies/Release/libs/zlib.lib"  -DTBB_DIR="C:/Program Files (x86)/Intel/oneAPI/tbb/2021.12" ..
    - cmake --build . --config Release --parallel 12 -j 12 | Out-Null 
    # Build Agros
    - cd ..
    - cd ..
    # - mkdir -p build
    - cd build
    - cmake -S .. -B . | Out-Null 
    - cmake --build . --config Release --parallel 12  -j 12 | Out-Null 
    # Generation and build of plugins
    - xcopy "..\dealii\build\lib\deal_II.lib" ".\usr\lib\" /Y    
    - xcopy "..\..\install\Others\*.dll" "..\build\usr\bin\" /Y
    - cd .\usr\bin
    - C:\Qt\6.5.3\msvc2019_64\bin\windeployqt.exe .
    - cd ..
    - cd .. 
    - .\usr\bin\agros_generator.exe | Out-Null 
    - cd plugins
    - cmake .
    - cmake --build . --config Release  --parallel 12 -j 12 
    - cd ..
    - cd ..
   
  artifacts:
    paths:
      - .\dealii\bundled\boost-1.70.0\include\boost\ptr_container
      - .\dealii\build\include
    
    
  # cache:
  #  paths:
  #    - .\build\bin
  #    - .\build\lib
  #    - .\dealii\build

test-windows:
  stage: test
  needs: ["build-windows"]
  allow_failure: true
  tags:
    - agros
    - win11
  
  script:
    - cd build
    - cd agros-python 
    - python -m venv env
    - .\env\Scripts\activate
    - pip install wheel
    - pip install cython
    - pip install scikit-build
    - pip install pytest
    - pip install pytest-rerunfailures
    - pip install numpy
    - cd agrossuite
    - Remove-Item -Path .\_skbuild\ -Recurse
    - pip install .    
    - cd ..
    - cd .\env\Lib\site-packages\agrossuite\tests
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v --reruns 5 --only-rerun AssertionError --only-rerun ValueError
    - cd ..
    - cd ..
  artifacts:
    paths:
      - .\dealii\bundled\boost-1.70.0\include\boost\ptr_container
      - .\dealii\build\include

test-windows-tutorials:
  stage: test
  needs: ["build-windows"]
  allow_failure: true
  tags:
    - agros
    - win11

  script: 
    - cd build/agros-python
    - .\env\Scripts\activate
    - cd tests-tutorials
    # generate test files
    - python tutorials.py
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v
    - cd ../..
  artifacts:
    paths:
      - .\dealii\bundled\boost-1.70.0\include\boost\ptr_container
      - .\dealii\build\include
    
test-windows-import-a2d:
  stage: test
  needs: ["build-windows"]
  allow_failure: true
  tags:
    - agros
    - win11

  script: 
    - cd build/agros-python
    - .\env\Scripts\activate
    - cd tests-import-a2d
    # generate test files
    - python tutorials_a2d.py
    - pytest --junitxml=../../report.xml --disable-warnings --durations=0 -v 
    - cd ../..    
  artifacts:
    paths:
      - .\dealii\bundled\boost-1.70.0\include\boost\ptr_container
      - .\dealii\build\include

deploy-windows:
    stage: deploy
    needs: ["test-windows"]
    tags:      
      - agros  		
      - win11

    script:
      - iscc.exe agros.iss
      - cd setup
      - curl.exe -T Agros.exe -u "${agros2d_ftp_user}:${agros2d_ftp_password}" ftp://agros2d.org/windows/   

    artifacts:
      paths:
        - .\dealii\bundled\boost-1.70.0\include\boost\ptr_container
        - .\dealii\build\include
 

deploy-windows-wheel:
  stage: deploy
  needs: ["test-windows", "test-windows-tutorials", "test-windows-import-a2d"]
  tags:
    - agros
    - win11

  script: 
    - cd build/agros-python/
    - .\env\Scripts\activate
    # upload to pypi
    - pip install twine
    - cd agrossuite
    - Remove-Item -Path .\_skbuild\ -Recurse    
    - python setup.py bdist_wheel
    - cd dist
    - python -m twine upload ./agrossuite-*.whl
    - cd ../..
